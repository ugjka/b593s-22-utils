package main

import (
	"bytes"
	"fmt"
	"io"
	"log"
	"os"
)

const template = `// generated by gen; DO NOT EDIT
package main

var sigs = map[int][]byte{
	0: []byte("%s"),
	1: []byte("%s"),
	2: []byte("%s"),
	3: []byte("%s"),
	4: []byte("%s"),
	5: []byte("%s"),
}
`
const template2 = `
var nosig = []byte("%s")
`

func main() {
	ft := "gen/sig_%d.png"
	hexes := make([]interface{}, 6)
	for i := 0; i <= 5; i++ {
		f, err := os.Open(fmt.Sprintf(ft, i))
		errFatal(err)
		hex, err := hexEncode(f)
		f.Close()
		errFatal(err)
		hexes[i] = hex
	}
	out, err := os.OpenFile("data.go", os.O_CREATE|os.O_RDWR|os.O_TRUNC, 0644)
	errFatal(err)
	fmt.Fprintf(out, template, hexes...)

	f, err := os.Open("gen/sigh.png")
	errFatal(err)
	nosigHex, err := hexEncode(f)
	f.Close()
	errFatal(err)
	fmt.Fprintf(out, template2, nosigHex)
}

func errFatal(err error) {
	if err == nil {
		return
	}
	log.Fatal(err)
}

func hexEncode(r io.Reader) (hex string, err error) {
	b := make([]byte, 1)
	buff := bytes.NewBuffer(nil)
	for {
		_, err := r.Read(b)
		if err == io.EOF {
			break
		} else if err != nil {
			return "", err
		}
		buff.WriteString("\\x" + fmt.Sprintf("%02X", b[0]))
	}
	return buff.String(), nil
}
